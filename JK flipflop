module jk_flipflop (
    input J, K,       // JK inputs
    input clk,        // Clock input
    input rst,        // Asynchronous reset
    output reg Q      // Output
);
    always @(posedge clk or posedge rst) begin
        if (rst)
            Q <= 0;
        else begin
            case ({J, K})
                2'b00: Q <= Q;       // No change
                2'b01: Q <= 0;       // Reset
                2'b10: Q <= 1;       // Set
                2'b11: Q <= ~Q;      // Toggle
            endcase
        end
    end
endmodule

// testbench

module test_jk_flipflop;
    reg J, K, clk, rst;
    wire Q;

    jk_flipflop uut (
        .J(J), .K(K),
        .clk(clk),
        .rst(rst),
        .Q(Q)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk;  // 10 time units clock period
    end

    // Test sequence
    initial begin
        $display("Time J K rst | Q");
        $monitor("%4t  %b %b  %b  | %b", $time, J, K, rst, Q);

        rst = 1; J = 0; K = 0;
        #10 rst = 0;
        #10 J = 1; K = 0;  // Set
        #10 J = 0; K = 1;  // Reset
        #10 J = 1; K = 1;  // Toggle
        #10 J = 0; K = 0;  // Hold
        #10 rst = 1;
        #10 rst = 0;
        #10 $finish;
    end
endmodule
